@namespace BlazorChatApp.Layout
@using Microsoft.AspNetCore.SignalR.Client
@page "/chat"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HubConnection hubConnection // Injected from the Program.cs

<h3>Чат с видеозвонками</h3>

<!-- Блок видеозвонка -->
<video id="localVideo" autoplay></video>
<button @onclick="StartVideoCall">Начать видеозвонок</button>

<!-- Блок чата -->
<div id="messageContainer">
    @foreach (var message in messages)
    {
        <div>@message</div>
    }
</div>

<input @bind="userMessage" placeholder="Введите сообщение..." />
<button @onclick="SendMessage">Отправить</button>

@code {
    private string userMessage = "";
    private List<string> messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            // Start SignalR connection
            await hubConnection.StartAsync();
        }

        // Receiving messages from the chat hub
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add($"{user}: {message}");
            InvokeAsync(StateHasChanged);
        });
    }


    private async Task SendMessage()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", "User1", userMessage);
            userMessage = string.Empty;
        }
    }

    private async Task StartVideoCall()
    {
        await JS.InvokeVoidAsync("startVideoCall");
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
